generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  email            String            @unique
  password         String
  role             UserRole          @default(USER)
  workoutPlans     WorkoutPlan[]
  workoutSchedules WorkoutSchedule[]
  workoutLogs      WorkoutLog[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Exercise {
  id                  String               @id @default(uuid())
  name                String               @unique
  description         String
  category            Category
  muscleGroup         MuscleGroup?
  difficulty          ExerciseDifficulty   @default(MODERATE)
  workoutPlanItems    WorkoutPlanItem[]
  workoutLogExercises WorkoutLogExercise[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model WorkoutPlan {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  items            WorkoutPlanItem[]
  workoutSchedules WorkoutSchedule[]
  workoutLogs      WorkoutLog[]
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model WorkoutPlanItem {
  id            String      @id @default(uuid())
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  workoutPlanId String
  exercise      Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  sets          Int
  repetitions   Int
  weight        Float // in kg
  restTime      Int // in seconds
  notes         String?
  order         Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workoutPlanId, exerciseId, order])
}

model WorkoutSchedule {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  workoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  workoutPlanId String
  scheduledDate DateTime
  scheduledTime DateTime?
  duration      Int? // in minutes
  isCompleted   Boolean     @default(false)
  notes         String?
  workoutLog    WorkoutLog?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model WorkoutLog {
  id                String               @id @default(uuid())
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  workoutPlan       WorkoutPlan          @relation(fields: [workoutPlanId], references: [id])
  workoutPlanId     String
  workoutSchedule   WorkoutSchedule?     @relation(fields: [workoutScheduleId], references: [id])
  workoutScheduleId String?              @unique
  startTime         DateTime
  endTime           DateTime?
  exercises         WorkoutLogExercise[]
  notes             String?
  rating            Int? // Optional rating (e.g., 1-5)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
}

model WorkoutLogExercise {
  id            String     @id @default(uuid())
  workoutLog    WorkoutLog @relation(fields: [workoutLogId], references: [id], onDelete: Cascade)
  workoutLogId  String
  exercise      Exercise   @relation(fields: [exerciseId], references: [id])
  exerciseId    String
  setsCompleted Int
  repsCompleted Int
  weightUsed    Float // in kg
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([workoutLogId, exerciseId])
}

enum Category {
  CARDIO
  STRENGTH
  FLEXIBILITY
  BALANCE
  PLYOMETRIC
}

enum MuscleGroup {
  CHEST
  BACK
  SHOULDERS
  BICEPS
  TRICEPS
  FOREARMS
  ABS
  CORE
  GLUTES
  QUADRICEPS
  HAMSTRINGS
  CALVES
  FULLBODY
}

enum UserRole {
  USER
  ADMIN
}

enum ExerciseDifficulty {
  BEGINNER
  MODERATE
  ADVANCED
}

